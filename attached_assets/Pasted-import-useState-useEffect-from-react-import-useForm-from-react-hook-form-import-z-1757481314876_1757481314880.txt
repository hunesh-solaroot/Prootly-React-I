import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { MapPin, Upload, Plus } from "lucide-react";
import { GoogleMap } from "./GoogleMap";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Switch } from "@/components/ui/switch";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { insertPlansetSchema, type InsertPlanset } from "@shared/schema";

// Create a simplified form schema that matches the database requirements
const plansetFormSchema = z.object({
  projectId: z.string().optional(),
  timezone: z.string().optional(),
  receivedTime: z.string().min(1, "Received time is required"),
  portalName: z.string().optional(),
  companyName: z.string().min(1, "Company name is required"),
  customerName: z.string().min(1, "Customer name is required"),
  customerEmail: z.string().email("Valid email is required"),
  customerPhone: z.string().min(10, "Phone number must be at least 10 digits"),
  siteAddress: z.string().min(1, "Site address is required"),
  city: z.string().min(1, "City is required"),
  state: z.string().min(1, "State is required"),
  coordinates: z.string().optional(),
  apnNumber: z.string().optional(),
  authorityHavingJurisdiction: z.string().optional(),
  utilityName: z.string().optional(),
  mountType: z.string().min(1, "Mount type is required"),
  addOnEquipments: z.string().optional(),
  governingCodes: z.string().optional(),
  propertyType: z.string().min(1, "Property type is required"),
  jobType: z.string().min(1, "Job type is required"),
  newConstruction: z.boolean().default(false),
  moduleManufacturer: z.string().optional(),
  moduleModelNo: z.string().optional(),
  moduleQuantity: z.number().min(1, "Module quantity must be at least 1").optional(),
  inverterManufacturer: z.string().optional(),
  inverterModelNo: z.string().optional(),
  inverterQuantity: z.number().min(1, "Inverter quantity must be at least 1").optional(),
  existingSolarSystem: z.boolean().default(false),
  proposalDesignFiles: z.array(z.string()).optional(),
  sitesurveyAttachments: z.array(z.string()).optional(),
  additionalComments: z.string().optional(),
});

type PlansetFormData = z.infer<typeof plansetFormSchema> & {
  receivedTime: string;
};

interface UploadPlansetModalProps {
  isOpen: boolean;
  onClose: () => void;
  projectId?: string;
}

export function UploadPlansetModal({ isOpen, onClose, projectId }: UploadPlansetModalProps) {
  const [mapCoordinates, setMapCoordinates] = useState<string>("");
  const [proposalFiles, setProposalFiles] = useState<string[]>([]);
  const [sitesurveyFiles, setSitesurveyFiles] = useState<string[]>([]);
  const [shouldUpdateMap, setShouldUpdateMap] = useState<boolean>(false);

  const { toast } = useToast();
  const queryClient = useQueryClient();

  const form = useForm<PlansetFormData>({
    resolver: zodResolver(plansetFormSchema),
    defaultValues: {
      projectId: projectId || "auto-generated",
      timezone: "PST",
      receivedTime: new Date().toISOString().slice(0, 16),
      portalName: "Main Portal",
      companyName: "Solar Company",
      customerName: "",
      customerEmail: "",
      customerPhone: "",
      siteAddress: "",
      city: "",
      state: "CA",
      coordinates: "",
      apnNumber: "",
      authorityHavingJurisdiction: "",
      utilityName: "",
      mountType: "House Roof",
      addOnEquipments: "None",
      governingCodes: "",
      propertyType: "residential",
      jobType: "pv",
      newConstruction: false,
      moduleManufacturer: "",
      moduleModelNo: "",
      moduleQuantity: 1,
      inverterManufacturer: "",
      inverterModelNo: "",
      inverterQuantity: 1,
      existingSolarSystem: false,
      proposalDesignFiles: [],
      sitesurveyAttachments: [],
      additionalComments: "",
    },
  });

  const createPlansetMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log("Sending data to API:", data);
      const response = await fetch('/api/plansets', {
        method: "POST",
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      console.log("API response:", result);

      if (!response.ok) {
        console.error("API error:", result);
        const error = new Error(result.message || 'Failed to create planset');
        (error as any).response = { data: result };
        throw error;
      }
      return result;
    },
    onSuccess: (data) => {
      console.log("Planset created successfully:", data);
      toast({ title: "Success", description: "Planset uploaded successfully!" });
      queryClient.invalidateQueries({ queryKey: ['/api/plansets'] });
      if (projectId) {
        queryClient.invalidateQueries({ queryKey: [`/api/projects/${projectId}/plansets`] });
      }
      onClose();
      form.reset();
      setProposalFiles([]);
      setSitesurveyFiles([]);
    },
    onError: (error: any) => {
      console.error("Mutation error:", error);

      let errorMessage = error?.message || "Failed to upload planset";
      if (error?.response?.data?.errors) {
        const fieldErrors = error.response.data.errors.map((err: any) =>
          `${err.field}: ${err.message}`
        ).join(', ');
        errorMessage = `Validation errors: ${fieldErrors}`;
      }

      toast({
        title: "Upload Failed",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  const handleMapClick = (coordinates: string) => {
    setMapCoordinates(coordinates);
    form.setValue("coordinates", coordinates);
  };

  const handleLocationSelect = (locationData: { lat: number; lng: number; address: string; city: string; state: string; coordinates: string }) => {
    // Update all form fields with the location data
    setMapCoordinates(locationData.coordinates);
    form.setValue("coordinates", locationData.coordinates);
    form.setValue("siteAddress", locationData.address);
    form.setValue("city", locationData.city);
    form.setValue("state", locationData.state);

    toast({
      title: "Location Selected",
      description: `Address: ${locationData.address}`,
    });
  };

  // Watch for address changes to update the map
  const watchedAddress = form.watch("siteAddress");
  const watchedCity = form.watch("city");
  const watchedState = form.watch("state");

  const fullAddress = `${watchedAddress}, ${watchedCity}, ${watchedState}`.replace(/^,\s*|,\s*$/g, '');

  // Debounced effect to update map when address changes
  useEffect(() => {
    if (fullAddress && fullAddress.length > 10) {
      const timer = setTimeout(() => {
        setShouldUpdateMap(prev => !prev);
      }, 1000);

      return () => clearTimeout(timer);
    }
  }, [fullAddress]);

  // Handle manual address changes to geocode and update coordinates
  const handleAddressGeocoding = async (address: string) => {
    if (!address || address.length < 10) return;

    try {
      const geocoder = new (window as any).google.maps.Geocoder();
      geocoder.geocode({ address }, (results: any, status: any) => {
        if (status === 'OK' && results[0]) {
          const result = results[0];
          const location = result.geometry.location;
          const lat = location.lat();
          const lng = location.lng();
          const components = result.address_components;

          // Extract city and state from address components
          let city = '';
          let state = '';

          for (const component of components) {
            const types = component.types;

            if (types.includes('locality')) {
              city = component.long_name;
            } else if (types.includes('administrative_area_level_1')) {
              state = component.short_name;
            }
          }

          // Auto-populate coordinates and location fields
          const coordinatesStr = `${lat.toFixed(6)},${lng.toFixed(6)}`;
          setMapCoordinates(coordinatesStr);
          form.setValue("coordinates", coordinatesStr);

          // Only update city and state if they're empty
          if (!form.getValues("city") && city) {
            form.setValue("city", city);
          }
          if (!form.getValues("state") && state) {
            form.setValue("state", state);
          }

          toast({
            title: "Address Found",
            description: `Coordinates updated: ${coordinatesStr}`,
          });
        }
      });
    } catch (error) {
      console.log("Geocoding not available yet");
    }
  };

  const handleFileUpload = (type: 'proposal' | 'sitesurvey', files: FileList | null) => {
    if (!files) return;

    const fileNames = Array.from(files).map(file => `uploads/${Date.now()}-${file.name}`);

    if (type === 'proposal') {
      const updatedFiles = [...proposalFiles, ...fileNames];
      setProposalFiles(updatedFiles);
      form.setValue("proposalDesignFiles", updatedFiles);
    } else {
      const updatedFiles = [...sitesurveyFiles, ...fileNames];
      setSitesurveyFiles(updatedFiles);
      form.setValue("sitesurveyAttachments", updatedFiles);
    }

    toast({
      title: "Files uploaded",
      description: `${files.length} file(s) added successfully`,
    });
  };

  const onSubmit = (data: PlansetFormData) => {
    console.log("Form data:", data);
    console.log("Proposal files:", proposalFiles);
    console.log("Sitesurvey files:", sitesurveyFiles);

    const submitData: any = {
      projectId: data.projectId || `planset-${Date.now()}`,
      timezone: data.timezone || "PST",
      receivedTime: data.receivedTime,
      portalName: data.portalName || "Main Portal",
      companyName: data.companyName || "Solar Company",
      customerName: data.customerName,
      customerEmail: data.customerEmail,
      customerPhone: data.customerPhone,
      siteAddress: data.siteAddress,
      city: data.city,
      state: data.state,
      coordinates: data.coordinates || "",
      apnNumber: data.apnNumber || "",
      authorityHavingJurisdiction: data.authorityHavingJurisdiction || "",
      utilityName: data.utilityName || "",
      mountType: data.mountType,
      addOnEquipments: data.addOnEquipments || "None",
      governingCodes: data.governingCodes || "",
      propertyType: data.propertyType,
      jobType: data.jobType,
      newConstruction: data.newConstruction || false,
      moduleManufacturer: data.moduleManufacturer || "",
      moduleModelNo: data.moduleModelNo || "",
      moduleQuantity: data.moduleQuantity || 1,
      inverterManufacturer: data.inverterManufacturer || "",
      inverterModelNo: data.inverterModelNo || "",
      inverterQuantity: data.inverterQuantity || 1,
      existingSolarSystem: data.existingSolarSystem || false,
      proposalDesignFiles: proposalFiles,
      sitesurveyAttachments: sitesurveyFiles,
      additionalComments: data.additionalComments || "",
    };

    console.log("Submit data:", submitData);
    createPlansetMutation.mutate(submitData);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-[90vw] h-[90vh] overflow-hidden p-0 bg-white dark:bg-gray-900">

        {/* Header */}
        <DialogHeader className="bg-gray-50 dark:bg-gray-800 px-6 py-4 border-b">
          <DialogTitle className="flex items-center gap-2 text-xl font-semibold text-gray-900 dark:text-gray-100">
            <Upload className="w-5 h-5" />
            Upload Planset
          </DialogTitle>
        </DialogHeader>

        {/* Scrollable Form Content */}
        <div className="flex-1 overflow-y-auto px-6 py-6">
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">

            {/* Basic Information Section */}
            <div className="space-y-6">
              <h2 className="text-xl font-medium text-gray-900 dark:text-gray-100  ">Basic Information</h2>

              {/* System Configuration */}
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
                <h3 className="text-base font-medium text-gray-800 dark:text-gray-200 mb-4">System Configuration</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div>
                    <Label htmlFor="timezone" className="text-sm font-medium text-gray-700 dark:text-gray-300">Select Timezone</Label>
                    <Select onValueChange={(value) => form.setValue("timezone", value)}>
                      <SelectTrigger className="mt-1">
                        <SelectValue placeholder="Select Timezone" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="PST">PST - Pacific Standard Time</SelectItem>
                        <SelectItem value="MST">MST - Mountain Standard Time</SelectItem>
                        <SelectItem value="CST">CST - Central Standard Time</SelectItem>
                        <SelectItem value="EST">EST - Eastern Standard Time</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="receivedTime" className="text-sm font-medium text-gray-700 dark:text-gray-300">Set Received Time *</Label>
                    <Input
                      type="datetime-local"
                      {...form.register("receivedTime")}
                      className="mt-1"
                    />
                    {form.formState.errors.receivedTime && (
                      <span className="text-sm text-red-500">{form.formState.errors.receivedTime.message}</span>
                    )}
                  </div>

                  <div>
                    <Label htmlFor="portalName" className="text-sm font-medium text-gray-700 dark:text-gray-300">Portal Name</Label>
                    <Select onValueChange={(value) => form.setValue("portalName", value)}>
                      <SelectTrigger className="mt-1">
                        <SelectValue placeholder="Select Portal" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Posigen">Posigen</SelectItem>
                        <SelectItem value="Test">Test</SelectItem>
                        <SelectItem value="SES">SES</SelectItem>
                        <SelectItem value="PEGASUS">PEGASUS</SelectItem>
                        <SelectItem value="CRE">CRE</SelectItem>
                        
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="companyName" className="text-sm font-medium text-gray-700 dark:text-gray-300">Company Name *</Label>
                    <Input
                      {...form.register("companyName")}
                      placeholder="Choose..."
                      className="mt-1"
                    />
                    {form.formState.errors.companyName && (
                      <span className="text-sm text-red-500">{form.formState.errors.companyName.message}</span>
                    )}
                  </div>
                </div>
              </div>

              {/* Homeowner Information and Map */}
              <div className="grid grid-cols-1 lg:grid-cols-6 gap-6">
                {/* Homeowner Information - Takes 2/3 space */}
                <div className="lg:col-span-3 bg-green-50 dark:bg-green-900/20 rounded-lg p-6">
                  <h3 className="text-base font-medium text-green-800 dark:text-green-300 mb-4">Homeowner Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="customerName" className="text-sm font-medium text-gray-700 dark:text-gray-300">Customer Name *</Label>
                      <Input
                        {...form.register("customerName")}
                        placeholder="Customer Name"
                        className="mt-1"
                      />
                      {form.formState.errors.customerName && (
                        <span className="text-sm text-red-500">{form.formState.errors.customerName.message}</span>
                      )}
                    </div>

                    <div>
                      <Label htmlFor="customerEmail" className="text-sm font-medium text-gray-700 dark:text-gray-300">Customer Email *</Label>
                      <Input
                        type="email"
                        {...form.register("customerEmail")}
                        placeholder="example@gmail.com"
                        className="mt-1"
                      />
                      {form.formState.errors.customerEmail && (
                        <span className="text-sm text-red-500">{form.formState.errors.customerEmail.message}</span>
                      )}
                    </div>

                    <div>
                      <Label htmlFor="customerPhone" className="text-sm font-medium text-gray-700 dark:text-gray-300">Customer Phone Number *</Label>
                      <div className="flex gap-2 mt-1">
                        <Select defaultValue="+1">
                          <SelectTrigger className="w-20">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="+1">+1</SelectItem>
                            <SelectItem value="+91">+91</SelectItem>
                            <SelectItem value="+44">+44</SelectItem>
                          </SelectContent>
                        </Select>
                        <Input
                          {...form.register("customerPhone")}
                          placeholder="Phone Number"
                          className="flex-1"
                        />
                      </div>
                      {form.formState.errors.customerPhone && (
                        <span className="text-sm text-red-500">{form.formState.errors.customerPhone.message}</span>
                      )}
                    </div>

                    <div>
                      <Label htmlFor="city" className="text-sm font-medium text-gray-700 dark:text-gray-300">City *</Label>
                      <Input
                        {...form.register("city")}
                        placeholder="City"
                        className="mt-1"
                      />
                      {form.formState.errors.city && (
                        <span className="text-sm text-red-500">{form.formState.errors.city.message}</span>
                      )}
                    </div>

                    <div>
                      <Label htmlFor="state" className="text-sm font-medium text-gray-700 dark:text-gray-300">State *</Label>
                      <Input
                        {...form.register("state")}
                        placeholder="State"
                        className="mt-1"
                      />
                      {form.formState.errors.state && (
                        <span className="text-sm text-red-500">{form.formState.errors.state.message}</span>
                      )}
                    </div>

                    <div>
                      <Label htmlFor="apnNumber" className="text-sm font-medium text-gray-700 dark:text-gray-300">APN Number</Label>
                      <Input
                        {...form.register("apnNumber")}
                        placeholder="Enter APN Number"
                        className="mt-1"
                      />
                    </div>

                    <div className="md:col-span-2">
                      <Label htmlFor="siteAddress" className="text-sm font-medium text-gray-700 dark:text-gray-300">Site Address as per utility bill *</Label>
                      <Input
                        {...form.register("siteAddress")}
                        placeholder="Address"
                        className="mt-1"
                        onBlur={(e) => handleAddressGeocoding(e.target.value)}
                      />
                      {form.formState.errors.siteAddress && (
                        <span className="text-sm text-red-500">{form.formState.errors.siteAddress.message}</span>
                      )}
                    </div>

                    <div className="md:col-span-2">
                      <Label htmlFor="coordinates" className="text-sm font-medium text-gray-700 dark:text-gray-300">Coordinates</Label>
                      <Input
                        {...form.register("coordinates")}
                        placeholder="Click on the map to set coordinates"
                        value={mapCoordinates}
                        readOnly
                        className="mt-1 bg-gray-50 dark:bg-gray-700"
                      />
                    </div>
                  </div>
                </div>

                {/* Map Section - Takes 1/3 space on the right */}
                <div className="bg-gray-50 lg:col-span-3 dark:bg-gray-800 rounded-lg p-4">
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Location Mapping</h4>

                  <div className="relative">
                    <GoogleMap
                      key={shouldUpdateMap ? 'updated' : 'initial'}
                      address={fullAddress.length > 10 ? fullAddress : ''}
                      coordinates={mapCoordinates}
                      onLocationSelect={handleLocationSelect}
                      height="430px"
                    />
                    {mapCoordinates && (
                      <div className="absolute bottom-2 left-2 right-2 bg-black/75 text-white text-xs px-2 py-1 rounded">
                        📍 {mapCoordinates}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Project Details Section */}
            <div className="space-y-6">
              <h2 className="text-lg font-medium text-gray-900 dark:text-gray-100 border-b pb-2">Project Details</h2>

              {/* Project Information */}
              <div className="bg-green-50 dark:bg-green-900/20 rounded-lg p-6">
                <h3 className="text-base font-medium text-green-800 dark:text-green-300 mb-4">Project Information</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="authorityHavingJurisdiction" className="text-sm font-medium text-gray-700 dark:text-gray-300">Authority Having Jurisdiction</Label>
                    <Input
                      {...form.register("authorityHavingJurisdiction")}
                      placeholder="Enter AHJ"
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="utilityName" className="text-sm font-medium text-gray-700 dark:text-gray-300">Utility Name</Label>
                    <Input
                      {...form.register("utilityName")}
                      placeholder="Enter Utility"
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="mountType" className="text-sm font-medium text-gray-700 dark:text-gray-300">Mount Type *</Label>
                    <Select onValueChange={(value) => form.setValue("mountType", value)}>
                      <SelectTrigger className="mt-1">
                        <SelectValue placeholder="House Roof" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="House Roof">House Roof</SelectItem>
                        <SelectItem value="Ground Mount">Ground Mount</SelectItem>
                        <SelectItem value="Carport">Carport</SelectItem>
                        <SelectItem value="House Roof + Ground Mount">House Roof + Ground Mount</SelectItem>
                        <SelectItem value="Mobile Home">Mobile Home</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="addOnEquipments" className="text-sm font-medium text-gray-700 dark:text-gray-300">Add-on Equipments</Label>
                    <Input
                      {...form.register("addOnEquipments")}
                      placeholder="None"
                      className="mt-1"
                    />
                  </div>
                </div>
                {/* Text area for Governing code */}
                <div className="grid grid-cols-1 mt-4 md:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="governingCodes" className="text-sm font-medium text-gray-700 dark:text-gray-300">Governing Codes</Label>
                    <Textarea
                      {...form.register("governingCodes")}
                      placeholder="Enter any Governing comments here"
                      rows={3}
                      className="mt-1 resize-none "
                    /></div>
                </div>

              </div>


              {/* System Configuration */}
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
                <h3 className="text-base font-medium text-gray-800 dark:text-gray-200 mb-4">System Configuration</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block">Property Type *</Label>
                    <div className="flex gap-2">
                      <Button
                        type="button"
                        variant={form.watch("propertyType") === "residential" ? "default" : "outline"}
                        className="flex-1 h-10"
                        onClick={() => form.setValue("propertyType", "residential")}
                      >
                        Residential
                      </Button>
                      <Button
                        type="button"
                        variant={form.watch("propertyType") === "commercial" ? "default" : "outline"}
                        className="flex-1 h-10"
                        onClick={() => form.setValue("propertyType", "commercial")}
                      >
                        Commercial
                      </Button>
                    </div>
                  </div>

                  <div>
                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block">Job Type *</Label>
                    <div className="flex gap-1">
                      <Button
                        type="button"
                        variant={form.watch("jobType") === "pv" ? "default" : "outline"}
                        className="flex-1 h-10 text-xs"
                        onClick={() => form.setValue("jobType", "pv")}
                      >
                        PV
                      </Button>
                      <Button
                        type="button"
                        variant={form.watch("jobType") === "pv+battery" ? "default" : "outline"}
                        className="flex-1 h-10 text-xs"
                        onClick={() => form.setValue("jobType", "pv+battery")}
                      >
                        PV+Battery
                      </Button>
                      <Button
                        type="button"
                        variant={form.watch("jobType") === "battery" ? "default" : "outline"}
                        className="flex-1 h-10 text-xs"
                        onClick={() => form.setValue("jobType", "battery")}
                      >
                        Battery
                      </Button>
                    </div>
                  </div>

                  <div>
                    <Label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block">New Construction *</Label>
                    <div className="flex gap-2">
                      <Button
                        type="button"
                        variant={form.watch("newConstruction") === false ? "default" : "outline"}
                        className="flex-1 h-10"
                        onClick={() => form.setValue("newConstruction", false)}
                      >
                        No
                      </Button>
                      <Button
                        type="button"
                        variant={form.watch("newConstruction") === true ? "default" : "outline"}
                        className="flex-1 h-10"
                        onClick={() => form.setValue("newConstruction", true)}
                      >
                        Yes
                      </Button>
                    </div>
                  </div>
                </div>
              </div>

              {/* Module and Inverter Information */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Module Section */}
                <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6">
                  <h4 className="text-base font-medium text-blue-800 dark:text-blue-300 mb-4">Module Information</h4>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="moduleManufacturer" className="text-sm font-medium text-gray-700 dark:text-gray-300">Module Manufacturer *</Label>
                      <Select onValueChange={(value) => form.setValue("moduleManufacturer", value)}>
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Select Manufacturer" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Tesla">Tesla</SelectItem>
                          <SelectItem value="SunPower">SunPower</SelectItem>
                          <SelectItem value="LG">LG</SelectItem>
                          <SelectItem value="Panasonic">Panasonic</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="moduleModelNo" className="text-sm font-medium text-gray-700 dark:text-gray-300">Module Model No. *</Label>
                      <Select onValueChange={(value) => form.setValue("moduleModelNo", value)}>
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Select Model No." />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Model-A">Model-A</SelectItem>
                          <SelectItem value="Model-B">Model-B</SelectItem>
                          <SelectItem value="Model-C">Model-C</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="moduleQuantity" className="text-sm font-medium text-gray-700 dark:text-gray-300">Quantity *</Label>
                      <Input
                        type="number"
                        {...form.register("moduleQuantity", { valueAsNumber: true })}
                        placeholder="Enter Quantity"
                        className="mt-1"
                      />
                    </div>
                  </div>
                </div>

                {/* Inverter Section */}
                <div className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-6">
                  <h4 className="text-base font-medium text-purple-800 dark:text-purple-300 mb-4">Inverter Information</h4>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="inverterManufacturer" className="text-sm font-medium text-gray-700 dark:text-gray-300">Inverter Manufacturer *</Label>
                      <Select onValueChange={(value) => form.setValue("inverterManufacturer", value)}>
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Select Manufacturer" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Enphase">Enphase</SelectItem>
                          <SelectItem value="SolarEdge">SolarEdge</SelectItem>
                          <SelectItem value="Tesla">Tesla</SelectItem>
                          <SelectItem value="SMA">SMA</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="inverterModelNo" className="text-sm font-medium text-gray-700 dark:text-gray-300">Inverter Model No. *</Label>
                      <Select onValueChange={(value) => form.setValue("inverterModelNo", value)}>
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Select Model No." />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="IQ7+">IQ7+</SelectItem>
                          <SelectItem value="IQ8+">IQ8+</SelectItem>
                          <SelectItem value="P300">P300</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="inverterQuantity" className="text-sm font-medium text-gray-700 dark:text-gray-300">Quantity *</Label>
                      <Input
                        type="number"
                        {...form.register("inverterQuantity", { valueAsNumber: true })}
                        placeholder="Enter Quantity"
                        className="mt-1"
                      />
                    </div>

                    <div className="flex items-center justify-between pt-2">
                      <Label className="text-sm font-medium text-gray-700 dark:text-gray-300">Add Inverter</Label>
                      <Button type="button" variant="outline" size="sm">
                        <Plus className="w-4 h-4 mr-2" />
                        + Inverter
                      </Button>
                    </div>
                  </div>
                </div>
              </div>

              {/* Solar System Question */}
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
                <Label className="text-base font-medium text-gray-700 dark:text-gray-300 mb-3 block">Do you have Existing Solar System?</Label>
                <div className="flex gap-3">
                  <Button
                    type="button"
                    variant={form.watch("existingSolarSystem") === false ? "default" : "outline"}
                    onClick={() => form.setValue("existingSolarSystem", false)}
                  >
                    No
                  </Button>
                  <Button
                    type="button"
                    variant={form.watch("existingSolarSystem") === true ? "default" : "outline"}
                    onClick={() => form.setValue("existingSolarSystem", true)}
                  >
                    Yes
                  </Button>
                </div>
              </div>
            </div>

            {/* File Uploads Section */}
            <div className="space-y-6">
              <h2 className="text-lg font-medium text-gray-900 dark:text-gray-100 border-b pb-2">File Uploads</h2>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Proposal Design File */}
                <div className="bg-amber-50 dark:bg-amber-900/20 rounded-lg p-6">
                  <Label className="text-base font-medium text-amber-800 dark:text-amber-300 mb-4 block">Proposal Design File</Label>
                  <div
                    className="border-2 border-dashed border-amber-300 dark:border-amber-600 rounded-lg p-6 text-center cursor-pointer hover:border-amber-500 hover:bg-amber-25"
                    onClick={() => document.getElementById('proposal-files')?.click()}
                  >
                    <Upload className="w-8 h-8 mx-auto mb-2 text-amber-600" />
                    <p className="text-sm text-amber-700 dark:text-amber-300">
                      + click to add or<br />drop here
                    </p>
                  </div>
                  <input
                    id="proposal-files"
                    type="file"
                    multiple
                    accept=".pdf,.jpg,.jpeg,.png"
                    className="hidden"
                    onChange={(e) => handleFileUpload('proposal', e.target.files)}
                  />
                  <p className="text-xs text-amber-600 dark:text-amber-400 mt-2 text-center">
                    {proposalFiles.length} files uploaded
                  </p>
                </div>

                {/* Sitesurvey Attachments */}
                <div className="bg-teal-50 dark:bg-teal-900/20 rounded-lg p-6">
                  <Label className="text-base font-medium text-teal-800 dark:text-teal-300 mb-4 block">Sitesurvey Attachments</Label>
                  <div
                    className="border-2 border-dashed border-teal-300 dark:border-teal-600 rounded-lg p-6 text-center cursor-pointer hover:border-teal-500 hover:bg-teal-25"
                    onClick={() => document.getElementById('sitesurvey-files')?.click()}
                  >
                    <Upload className="w-8 h-8 mx-auto mb-2 text-teal-600" />
                    <p className="text-sm text-teal-700 dark:text-teal-300">
                      + click to add or<br />drop here
                    </p>
                  </div>
                  <input
                    id="sitesurvey-files"
                    type="file"
                    multiple
                    accept=".pdf,.jpg,.jpeg,.png"
                    className="hidden"
                    onChange={(e) => handleFileUpload('sitesurvey', e.target.files)}
                  />
                  <p className="text-xs text-teal-600 dark:text-teal-400 mt-2 text-center">
                    {sitesurveyFiles.length} files uploaded
                  </p>
                </div>

                {/* Additional Comments */}
                <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
                  <Label htmlFor="additionalComments" className="text-base font-medium text-gray-800 dark:text-gray-300 mb-4 block">Additional Comments</Label>
                  <Textarea
                    {...form.register("additionalComments")}
                    placeholder="Enter any additional comments here..."
                    rows={6}
                    className="resize-none"
                  />
                </div>
              </div>
            </div>
          </form>
        </div>

        {/* Footer */}
        <div className="bg-gray-50 dark:bg-gray-800 border-t px-6 py-4 flex justify-end gap-3">
          <Button
            type="button"
            variant="outline"
            onClick={onClose}
            className="text-gray-600 border-gray-300 hover:bg-gray-100"
          >
            Cancel
          </Button>

          <Button
            type="submit"
            disabled={createPlansetMutation.isPending}
            onClick={form.handleSubmit(onSubmit)}
            className="bg-green-600 hover:bg-green-700 text-white"
          >
            {createPlansetMutation.isPending ? (
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                Saving...
              </div>
            ) : (
              "Save Planset"
            )}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}